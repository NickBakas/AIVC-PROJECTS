# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1auNKz3fhx87krxv_-Dzd7j9BDq4u6Als
"""

import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

#DATA GENERATION
observations=1000
xs=np.random.uniform(low=-10,high=10,size=(observations,1))
zs=np.random.uniform(-10,10,size=(observations,1))

generated_inputs=np.column_stack((xs,zs))
noise=np.random.uniform(-1,1,(observations,1))
generated_targets=2*xs-3*zs + 5 + noise
np.savez('TF_intro',iputs=generated_inputs,targets=generated_targets)

#Solving with TensorFlow
input_size= 2
output_size= 1

#Outline
inputs=tf.keras.Input(shape=(None,input_size))
targets=tf.keras.Input(shape=(None,input_size))
#Weights and biases
weights = tf.Variable(tf.random.uniform((input_size, output_size), minval=-0.1, maxval=0.1))
biases = tf.Variable(tf.random.uniform((output_size,), minval=-0.1, maxval=0.1))
outputs=tf.matmul(inputs,weights)+biases

#MSE & Optimization
mean_loss=tf.losses.mean_squared_error(labels=targets,predictions=outputs)/2.
optimize=tf.train.GradientDescentOptimizer(learning_rate=0.05).minimize(mean_loss)


sess=tf.InteractiveSession()

#Initialization
initializer=tf.global_variables_initializer()
sess.run(initializer)

#Load Data
training_data=np.load('TF_intro.npz')

#Learning
for e in range (100)
  _, curr_loss=sess.run([optimize,mean_loss],feed_dict={inputs: training_data['inputs'],targets: training_data['targets']})
  print (curr_loss)

#Plots
out=sess.run([outputs],
             feed_dict={inputs:training _data['inputs']})
plt.plot(np.squeeze(out),np.squeeze(training_data['targets']))
plt.xlabel('outputs')
plt.ylabel('targets')
plt.show()

